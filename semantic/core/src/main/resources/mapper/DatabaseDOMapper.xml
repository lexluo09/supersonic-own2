<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tencent.supersonic.semantic.core.infrastructure.mapper.DatabaseDOMapper">
    <resultMap id="BaseResultMap"
            type="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="domain_id" jdbcType="BIGINT" property="domainId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="description" jdbcType="VARCHAR" property="description"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
            type="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        <result column="config" jdbcType="LONGVARCHAR" property="config"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem"
                                            open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , domain_id, name, description, type, created_at, created_by, updated_at, updated_by
    </sql>
    <sql id="Blob_Column_List">
        config
    </sql>
    <select id="selectByExampleWithBLOBs"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDOExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from s2_database
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDOExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from s2_database
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limitStart != null and limitStart>=0">
            limit #{limitStart} , #{limitEnd}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from s2_database
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from s2_database
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        insert into s2_database (id, domain_id, name,
                                 description, type, created_at,
                                 created_by, updated_at, updated_by,
                                 config)
        values (#{id,jdbcType=BIGINT}, #{domainId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR},
                #{description,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR},
                #{createdAt,jdbcType=TIMESTAMP},
                #{createdBy,jdbcType=VARCHAR}, #{updatedAt,jdbcType=TIMESTAMP},
                #{updatedBy,jdbcType=VARCHAR},
                #{config,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        insert into s2_database
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="domainId != null">
                domain_id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="createdAt != null">
                created_at,
            </if>
            <if test="createdBy != null">
                created_by,
            </if>
            <if test="updatedAt != null">
                updated_at,
            </if>
            <if test="updatedBy != null">
                updated_by,
            </if>
            <if test="config != null">
                config,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="domainId != null">
                #{domainId,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null">
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="createdBy != null">
                #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedAt != null">
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedBy != null">
                #{updatedBy,jdbcType=VARCHAR},
            </if>
            <if test="config != null">
                #{config,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDOExample"
            resultType="java.lang.Long">
        select count(*) from s2_database
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByPrimaryKeySelective"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        update s2_database
        <set>
            <if test="domainId != null">
                domain_id = #{domainId,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null">
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="createdBy != null">
                created_by = #{createdBy,jdbcType=VARCHAR},
            </if>
            <if test="updatedAt != null">
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedBy != null">
                updated_by = #{updatedBy,jdbcType=VARCHAR},
            </if>
            <if test="config != null">
                config = #{config,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        update s2_database
        set domain_id   = #{domainId,jdbcType=BIGINT},
            name        = #{name,jdbcType=VARCHAR},
            description = #{description,jdbcType=VARCHAR},
            type        = #{type,jdbcType=VARCHAR},
            created_at  = #{createdAt,jdbcType=TIMESTAMP},
            created_by  = #{createdBy,jdbcType=VARCHAR},
            updated_at  = #{updatedAt,jdbcType=TIMESTAMP},
            updated_by  = #{updatedBy,jdbcType=VARCHAR},
            config      = #{config,jdbcType=LONGVARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey"
            parameterType="com.tencent.supersonic.semantic.core.domain.dataobject.DatabaseDO">
        update s2_database
        set domain_id   = #{domainId,jdbcType=BIGINT},
            name        = #{name,jdbcType=VARCHAR},
            description = #{description,jdbcType=VARCHAR},
            type        = #{type,jdbcType=VARCHAR},
            created_at  = #{createdAt,jdbcType=TIMESTAMP},
            created_by  = #{createdBy,jdbcType=VARCHAR},
            updated_at  = #{updatedAt,jdbcType=TIMESTAMP},
            updated_by  = #{updatedBy,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>